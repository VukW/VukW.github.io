library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
trainIndex = createDataPartition(diagnosis, p = 0.50,list=FALSE)
training = adData[trainIndex,]
testing = adData[-trainIndex,]
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
?grep
colnames(training)
tr1<-training[,58:69]
head(tr1)
preProcess(x = tr1,thresh = 0.8,method = "pca")
tr1<-training[,c(1,58:69)]
train(tr1[,-1],y = tr1[,1],method = "glm")
trmod1<-train(tr1[,-1],y = tr1[,1],method = "glm")
trmod2<-train(tr1[,-1],y = tr1[,1],method = "glm",preProcess = "pca",tresh = 0.8)
trmod2<-train(tr1[,-1],y = tr1[,1],method = "glm",preProcess = "pca",thresh = 0.8)
preProcess(x = tr1[,-1],thresh = 0.8,method = "pca")
prep<-preProcess(x = tr1[,-1],thresh = 0.8,method = "pca")
trmod2<-train(prep,y = tr1[,1],method = "glm")
head(prep)
tr2<-predict(prep, tr1[,-1])
trmod2<-train(tr2,y = tr1[,1],method = "glm")
confusionMatrix(testing[,1],predict(trmod1,testing[,-1]))
confusionMatrix(testing[,1],predict(trmod2,predict(prep,testing[,-1]))
)
ts2<-predict(prep, testing[,-1])
ts1<-ts[,c(1,58:69)]
ts1<-testing[,c(1,58:69)]
confusionMatrix(ts1[,1],predict(trmod1,ts1[,-1]))
ts2<-predict(prep, ts1[,-1])
confusionMatrix(ts1[,1],predict(trmod2,ts2[,-1]))
confusionMatrix(ts1[,1],predict(trmod2,ts2))
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
set.seed(125)
trainId<-caret::createDataPartition(y = segmentationOriginal$Case)
training<-segmentationOriginal[trainId,]
training<-segmentationOriginal[trainId[[1]],]
testing<-segmentationOriginal[-trainId[[1]],]
trmod<-train(Case ~ ., data = training, method = "rpart")
trmod
trmod$finalModel
summary(training)
summary(segmentationOriginal)
set.seed(125)
library(dplyr)
training<-filter(segmentationOriginal, Case = "train")
training<-segmentationOriginal[segmentationOriginal$Case == "train",]
test<-segmentationOriginal[segmentationOriginal$Case == "test",]
trmod<-train(Class ~ ., data = training, method = "rpart")
testing<-segmentationOriginal[segmentationOriginal$Case == "test",]
training<-segmentationOriginal[segmentationOriginal$Case == "Train",]
testing<-segmentationOriginal[segmentationOriginal$Case == "Test",]
trmod<-train(Class ~ ., data = training, method = "rpart")
trmod$finalModel
install.packages("rattle")
plot(trmod$finalMode, uniform = T)
text(trmod$finalMode, use.n = T, all = T, cex = 0.8)
library(pgmm)
data(olive)
olive = olive[,-1]
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
summary(training$Superplasticizer)
summary(log(training$Superplasticizer)
)
summary(log(training$Superplasticizer+1))
hist(log(training$Superplasticizer+1))
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
tr1<-training[,58:69]
tr1<-training[,c(1,58:69)]
trmod2<-train(tr1[,-1],y = tr1[,1],method = "glm",preProcess = "pca",thresh = 0.8)
prep<-preProcess(x = tr1[,-1],thresh = 0.8,method = "pca")
head(prep)
preProcess(x = tr1[,-1],thresh = 0.8,method = "pca")
trmod2<-train(prep,y = tr1[,1],method = "glm")
trmod1<-train(tr1[,-1],y = tr1[,1],method = "glm")
tr2<-predict(prep, tr1[,-1])
confusionMatrix(testing[,1],predict(trmod1,testing[,-1]))
trmod2<-train(prep,y = tr1[,1],method = "glm")
trmod2<-train(tr2,y = tr1[,1],method = "glm")
ts1<-testing[,c(1,58:69)]
ts2<-predict(prep, ts1[,-1])
confusionMatrix(ts1[,1],predict(trmod2,ts2))
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
set.seed(125)
training<-segmentationOriginal[segmentationOriginal$Case == "train",]
testing<-segmentationOriginal[segmentationOriginal$Case == "test",]
trmod<-train(Class ~ ., data = training, method = "rpart")
training<-segmentationOriginal[segmentationOriginal$Case == "Train",]
testing<-segmentationOriginal[segmentationOriginal$Case == "Test",]
trmod<-train(Class ~ ., data = training, method = "rpart")
library(rattle)
fancyRpartPlot(trmod$finalModel)
trmod$finalModel
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
set.seed(13234)
head(trainSA)
trmod<-train(chd~age+alcohol+obesity+tobacco+typea+ldl, data = trainSA, method = "glm", family = "binomial")
missClass(trainSA$chd, predict(trmod, trainSA[,-"chd"]))
missClass(trainSA$chd, predict(trmod, trainSA[,-c("chd")]))
missClass(trainSA$chd, predict(trmod, trainSA[,-10]))
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
set.seed(33833)
trmod<-train(y~.,data = vowel.train, method = "rf")
varImp(trmod)
varImp(trmod$finalModel)
varImp(trmod$finalModel, scale = F)
varImp(trmod, scale = F)
trmod<-train(y~.,data = vowel.train, method = "rf", importance = T)
set.seed(33833)
trmod<-train(y~.,data = vowel.train, method = "rf", importance = T)
varImp(trmod, scale = F)
varImp(trmod, scale = T)
vowel.train$y<-as.factor(vowel.train$y)
vowel.test$y<-as.factor(vowel.test$y)
set.seed(33833)
trmod<-train(y~.,data = vowel.train, method = "rf", importance = T)
varImp(trmod, scale = F)
varImp(trmod)
trmod1<-train(y~.,data = vowel.train, method = "gbm")
View(vowel.test)
confusionMatrix(predict(trmod, vowel.test[,-1]), vowel.test[,1])
trmod<-train(y~.,data = vowel.train, method = "rf")
confusionMatrix(predict(trmod, vowel.test[,-1]), vowel.test[,1])
set.seed(33833)
trmod<-train(y~.,data = vowel.train, method = "rf")
confusionMatrix(predict(trmod, vowel.test[,-1]), vowel.test[,1])
trmod1<-train(y~.,data = vowel.train, method = "gbm")
confusionMatrix(predict(trmod1, vowel.test[,-1]), vowel.test[,1])
confusionMatrix(predict(trmod1, vowel.test[,-1]), predict(trmod, vowel.test[,-1]))
library(caret)
library(gbm)
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
set.seed(62433)
trmod1<-train(diagnosis~.,data = training, method = "rf")
trmod2<-train(diagnosis~.,data = training, method = "gbm")
trmod3<-train(diagnosis~.,data = training, method = "lda")
View(testing)
fit<-data.frame(val=testing$diagnosis, rf = predict(trmod1,testing[,-1]), gbm = predict(trmod2,testing[,-1]), lda = predict(trmod3,testing[,-1]))
head(fit)
confusionMatrix(fit$rf,fit$val)$Accuracy
confusionMatrix(fit$rf,fit$val)$accuracy
confusionMatrix(fit$rf,fit$val)$koefficients[1]
table<-confusionMatrix(fit$rf,fit$val)
table
table$overall[1]
confusionMatrix(fit$rf,fit$val)$overall[1]
confusionMatrix(fit$gbm,fit$val)$overall[1]
confusionMatrix(fit$lda,fit$val)$overall[1]
fittr<-data.frame(val=training$diagnosis, rf = predict(trmod1,training[,-1]), gbm = predict(trmod2,training[,-1]), lda = predict(trmod3,training[,-1]))
trmodtotal<-train(val~.,data = fittr, method = "rf")
confusionmatrix(predict(trmodtotal,fittr[,-1]),fittr[,1])
confusionMatrix(predict(trmodtotal,fittr[,-1]),fittr[,1])
confusionMatrix(predict(trmodtotal,fit[,-1]),fit[,1])
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
set.seed(233)
?getModelInfo
getModelInfo()
names(getModelInfo())
View(training)
trmod<-train(CompressibeStrength~.,data = training, method = "lasso")
trmod<-train(CompressiveStrength~.,data = training, method = "lasso")
trmod$finalModel
?plot.enet
plot.enet(trmod)
plot.enet(trmod$finalModel)
library(lubridate)
dat = read.csv("gaData.csv")
training = dat[year(dat$date) < 2012,]
testing = dat[(year(dat$date)) > 2011,]
tstrain = ts(training$visitsTumblr)
library(forecast)
install.packages("forecast")
library(forecast)
?bats()
View(training)
bats(training$visitsTumblr)
trmod<-bats(training$visitsTumblr)
forecast(trmod)
View(testing)
forecast(testing[,1:2])
forecast(testing)
forecast(testing, h = 10)
forecast(training, h = 10)
forecast(trmod, h = 10)
forecast(trmod, h = 5)
fittest<-forecast(trmod, h = nrow(testing))
head(fittest)
sum((testing$visitsTumblr<=fittest$upper[,2])&(testing$visitsTumblr>=fittest$lower[,2]))
sum((testing$visitsTumblr<=fittest$upper[,2])&(testing$visitsTumblr>=fittest$lower[,2]))/nrow(testing)
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
set.seed(325)
library(e1071)
trmod<-e1071::svm(CompressiveStrength~.,data = training)
View(testing)
View(testing)
View(testing)
fittest<-predict(trmod, testing[,-9])
predict(trmod, testing[,-9])
fittest<-predict(trmod, testing[,-9])
str(fittest)
sqrt( mean( (testing$CompressiveStrength-fittest)^2))
```{r}
set.seed(514229)
nastr <- c("NA", "#DIV/0!","")
training<-read.csv("pml-training.csv", na.strings = nastr)
testing<-read.csv("pml-testing.csv" , na.strings = nastr)
n<-ncol(training)
emptystrs<-training$new_window == "no"
emptytrain<-training[emptystrs,]
emptycols<-NULL
for (i in 1:n){
if (is.factor(emptytrain[,i])){
emptytrain[,i]<-droplevels(emptytrain[,i])
}
if (length(levels(as.factor(emptytrain[,i])))<=1){
emptycols<-c(emptycols,i)
}
}
#---------------------
#add to emptycols some redundant variables
emptycols<-c(emptycols, 1:7)
#---------------------
emptytrain<-emptytrain[,-emptycols]
emptytest<-testing[,-emptycols]
#fulltrain<-training[!emptystrs,]
ny<-ncol(emptytrain)
trainId<-createDataPartition(emptytrain$classe, p = 0.8, list = F)
emptyval<-emptytrain[-trainId,]
emptytrain<-emptytrain[trainId,]
trmod<-NULL
#for (name in levels(emptytrain$user_name)) {
#trmod<-list(trmod, train(classe~raw_timestamp_part_1, data = filter(emptytrain,user_name == name), method = "rpart", control = rpart.control(cp = 0.001)))
#}
trmod<-train(classe~., data = emptytrain, method = "rf", trControl = trainControl(method = "none"),tuneGrid = data.frame(mtry = 50))
library(caret)
library(rattle)
set.seed(514229)
nastr <- c("NA", "#DIV/0!","")
training<-read.csv("pml-training.csv", na.strings = nastr)
testing<-read.csv("pml-testing.csv" , na.strings = nastr)
n<-ncol(training)
emptystrs<-training$new_window == "no"
emptytrain<-training[emptystrs,]
emptycols<-NULL
for (i in 1:n){
if (is.factor(emptytrain[,i])){
emptytrain[,i]<-droplevels(emptytrain[,i])
}
if (length(levels(as.factor(emptytrain[,i])))<=1){
emptycols<-c(emptycols,i)
}
}
#---------------------
#add to emptycols some redundant variables
emptycols<-c(emptycols, 1:7)
#---------------------
emptytrain<-emptytrain[,-emptycols]
emptytest<-testing[,-emptycols]
#fulltrain<-training[!emptystrs,]
ny<-ncol(emptytrain)
trainId<-createDataPartition(emptytrain$classe, p = 0.8, list = F)
emptyval<-emptytrain[-trainId,]
emptytrain<-emptytrain[trainId,]
trmod<-NULL
#for (name in levels(emptytrain$user_name)) {
#trmod<-list(trmod, train(classe~raw_timestamp_part_1, data = filter(emptytrain,user_name == name), method = "rpart", control = rpart.control(cp = 0.001)))
#}
trmod<-train(classe~., data = emptytrain, method = "rf", trControl = trainControl(method = "none"),tuneGrid = data.frame(mtry = 50))
trmod
trmod$finalModel
confusionMatrix(emptyval$classe, predict(trmod, emptyval[,-ny]))
qplot(raw_timestamp_part_2, num_window, colour = classe, data = emptytrain)
str(emptytrain)
str(trmod)
trmod$finalModel$forest
plot(trmod$finalModel, uniform = T)
text(trmod$finalModel, use.n = T, all= T)
trmod
trmod$finalModel
fancyRpartPlot(gettree(trmod$finalModel,k=1))
library(randomForest)
fancyRpartPlot(gettree(trmod$finalModel,k=1))
fancyRpartPlot(getTree(trmod$finalModel,k=1))
getTree(trmod$finalModel)
fancyRpartPlot(getTree(trmod$finalModel))
plot(getTree(trmod$finalModel), uniform = T)
text(getTree(trmod$finalModel), use.n = T, all= T)
printRandomForests(trmod$finalModel)
printRandomForests(getTree(trmod$finalModel))
?trainControl
trmod<-train(classe~., data = emptytrain, method = "rf", trControl = trainControl(method = "oob"))#,tuneGrid = data.frame(mtry = 50))
View(testing)
trmod$finalModel
trmod$finalModel$mtry
confusionMatrix(emptyval$classe, predict(trmod, emptyval[,-ny]))
dim(training)
sum(training$new_window == "yes")
sum(training$new_window == "no")
View(training)
head(train[,1:7])
head(training[,1:7])
qplot(raw_timestamp_part_1, num_window, color = classe, data = training[training$new_window == "no"])
qplot(raw_timestamp_part_1, num_window, color = classe, data = training[training$new_window == "no",])
qplot(raw_timestamp_part_2, num_window, color = classe, data = training[training$new_window == "no",])
qplot(raw_timestamp_part_1, classe, color = classe, data = training[training$new_window == "no",])
qplot(raw_timestamp_part_1, classe, color = user_name, data = training[training$new_window == "no",])
qplot(raw_timestamp_part_2, user_name, color = classe, data = training[training$new_window == "no",])
qplot(cvtd_timestamp,user_name, color = classe, data = training[training$new_window == "no",])
qplot(num_window,user_name, color = classe, data = training[training$new_window == "no",])
qplot(raw_timestamp_part_1,raw_timestamp_part_2, color = classe, data = training[training$new_window == "no",])
qplot(raw_timestamp_part_1,raw_timestamp_part_2, color = classe, data = training[training$new_window == "no",raw_timestamp_part_1 < 13226000000])
qplot(raw_timestamp_part_1,raw_timestamp_part_2, color = classe, data = training[training$new_window == "no",training$raw_timestamp_part_1 < 13226000000])
qplot(raw_timestamp_part_1,raw_timestamp_part_2, color = classe, data = training[(training$new_window == "no")&(training$raw_timestamp_part_1 < 13226000000),])
qplot(raw_timestamp_part_1,raw_timestamp_part_2, color = classe, data = training[(training$new_window == "no")&(training$raw_timestamp_part_1 < 1322600000),])
qplot(raw_timestamp_part_1,num_window, color = classe, data = training[(training$new_window == "no")&(training$raw_timestamp_part_1 < 1322600000),])
confusionMatrix(emptyval$classe, predict(trmod, emptyval[,-ny]))
trmod$finalModel$ntree
trmod$finalModel$err.rate
trmod$finalModel$oob.times
trmod$finalModel$tuneValue
trmod$finalModel$inbag
trmod$finalModel$confusion
trmod$finalModel$proximity
trmod$finalModel
trmod$finalModel$err.rate
trmod$finalModel$forest
mean(trmod$finalModel$err.rate)
trmod$finalModel
confusionMatrix(emptyval$classe, predict(trmod, emptyval[,-ny]))
conf<-confusionMatrix(emptyval$classe, predict(trmod, emptyval[,-ny]))
conf$overall
conf$overall["Accuracy"]
View(emptytest)
View(emptytest)
View(emptyval)
varImp(trmod$finalModel)
library(caret)
varImp(trmod$finalModel)
varImp(trmod$finalModel)[order(varImp(trmod$finalModel), decreasing = T),]
vi<-varImp(trmod$finalModel)
str(vi)
v
vi
vi[order(vi$overall, decreasing = T),]
vi[order(vi$overall, decreasing = T)]
order(vi$overall, decreasing = T)
order(vi$overall)
order(vi)
vi[order(vi, decreasing = T)]
vi[order(vi, decreasing = T),]
vi$varnames<-rownames(vi)
vi[order(vi$overall, decreasing = T),]
vi[order(vi$Overall, decreasing = T),]
vi<-varImp(trmod$finalModel)
vi[order(vi$Overall, decreasing = T),]
vi$varnames<-rownames(vi)
vi[order(vi$Overall, decreasing = T),]
head(vi[order(vi$Overall, decreasing = T),],10)
head(vi[order(vi$Overall, decreasing = T),"Overall"],10)
vi<-varImp(trmod$finalModel)
vi
str(vi)
vi[1,]
vi[,]
head(vi)
vi[1:51,]
vi[1:52,]
vi[c(3,4,2),]
vi$varnames<-rownames(vi)
vi[1:51,]
vi[c(3,4,2),1]
vi[c(3,4,2),1:2]
qplot(trmod$finalModel)
plot(trmod$finalModel)
plot(trmod$finalModel, log = y)
plot(trmod$finalModel, log = "y")
legend("top", colnames(model$err.rate),col=1:6,cex=0.8,fill=1:6)
legend("top", colnames(trmod$err.rate),col=1:6,cex=0.8,fill=1:6)
plot(c(0,1),type="n", axes=F, xlab="", ylab="")
layout(matrix(c(1,2),nrow=1),
width=c(4,1))
par(mar=c(5,4,4,0)) #No margin on the right side
plot(model, log="y")
par(mar=c(5,0,4,2)) #No margin on the left side
plot(c(0,1),type="n", axes=F, xlab="", ylab="")
legend("top", colnames(model$err.rate),col=1:4,cex=0.8,fill=1:4)
layout(matrix(c(1,2),nrow=1),
width=c(4,1))
par(mar=c(5,4,4,0)) #No margin on the right side
plot(trmod$finalModel, log="y")
par(mar=c(5,0,4,2)) #No margin on the left side
plot(c(0,1),type="n", axes=F, xlab="", ylab="")
legend("top", colnames(trmod$finalModel$err.rate),col=1:6,cex=0.8,fill=1:6)
layout(matrix(c(1,2),nrow=1),
width=c(4,1))
par(mar=c(5,4,4,1)) #No margin on the right side
plot(model, log="y")
par(mar=c(5,1,4,2)) #No margin on the left side
plot(c(0,1),type="n", axes=F, xlab="", ylab="")
legend("top", colnames(model$err.rate),col=1:4,cex=0.8,fill=1:4)
layout(matrix(c(1,2),nrow=1),
width=c(4,1))
par(mar=c(5,4,4,1)) #No margin on the right side
plot(trmod$finalModel, log="y")
par(mar=c(5,1,4,2)) #No margin on the left side
plot(c(0,1),type="n", axes=F, xlab="", ylab="")
legend("top", colnames(trmod$finalModel$err.rate),col=1:6,cex=0.8,fill=1:6)
layout(matrix(c(1,2),nrow=1),
width=c(4,1))
par(mar=c(5,4,4,0)) #No margin on the right side
plot(trmod$finalModel, log="y")
par(mar=c(5,1,4,2)) #No margin on the left side
plot(c(0,1),type="n", axes=F, xlab="", ylab="")
legend("top", colnames(trmod$finalModel$err.rate),col=1:6,cex=0.8,fill=1:6)
layout(matrix(c(1,2),nrow=1),
width=c(4,1))
par(mar=c(5,4,4,0)) #No margin on the right side
plot(trmod$finalModel, log="y")
par(mar=c(5,0,4,0)) #No margin on the left side
plot(c(0,1),type="n", axes=F, xlab="", ylab="")
legend("top", colnames(trmod$finalModel$err.rate),col=1:6,cex=0.8,fill=1:6)
colnames(trmod$finalModel$err.rate)
tail(trmod$finalModel$err.rate$OOB)
tail(trmod$finalModel$err.rate)
str(trmod$finalModel$err.rate)
tail(trmod$finalModel$err.rate["OOB"])
tail(trmod$finalModel$err.rate[,"OOB"])
trmod$finalModel$err.rate[500,"OOB"]
